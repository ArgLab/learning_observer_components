{
  "src/lib/components/LOConnection.react.js": {
    "description": "A simple interface to",
    "displayName": "LOConnection",
    "methods": [
      {
        "name": "encode_query_string",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "obj",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_init_client",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "state": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "This websocket state (in the readyState prop) and associated information.",
        "defaultValue": {
          "value": "{readyState: WebSocket.CONNECTING}",
          "computed": false
        }
      },
      "message": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "When messages are received, this property is updated with the message content."
      },
      "error": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "This property is set with the content of the onerror event."
      },
      "send": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "When this property is set, a message is sent with its content."
      },
      "url": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The websocket endpoint (e.g. wss://echo.websocket.org)."
      },
      "data_scope": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Supported websocket key (optional)."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/LOIndicatorBars.react.js": {
    "description": "LOIndicatorBars provide progress bars.\r\nIt takes a property, `data`, and\r\noutputs each item as a label/progress bar pair.\r\nIf the id of the item is not in the property `shown`,\r\nit will not appear.",
    "displayName": "LOIndicatorBars",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Classes for the outer most div."
      },
      "data": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data for the metrics should be in form:\r\n`{\r\n            \"transitions\": {\r\n                \"id\": \"transitions\",\r\n                \"value\": 81,\r\n                \"label\": \"Transitions\",\r\n                \"help\": \"Percentile based on total number of transitions used\"\r\n            },\r\n        }`",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "shown": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Which ids to show.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/LOMetrics.react.js": {
    "description": "LOMetrics creates badges for numeric values.\r\nIt takes a property, `data`, and\r\noutputs each item as a badge.\r\nIf the id of the item is not in the property `shown`,\r\nit will not appear.",
    "displayName": "LOMetrics",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Classes for the outer most div."
      },
      "data": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data for the metrics should be in form:\r\n`{\r\n            \"sentences\": {\r\n                \"id\": \"sentences\",\r\n                \"value\": 33,\r\n                \"label\": \" sentences\"\r\n            },\r\n        }`",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "shown": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Which ids to show.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/LOTextHighlight.react.js": {
    "description": "LOTextHighlight provides breakpoints and classes to allow for later highlighting.\r\nIt takes a property, `text`, and\r\nand breaks it up based on all possible breakpoints in property `highlight_breakpoints`.\r\nThe text is output as a variety of spans with classnames corresponding to ids.",
    "displayName": "LOTextHighlight",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Classes for the outer most div."
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text to be highlighted.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "highlight_breakpoints": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "highlight breakpoints in the form of:\r\n`{\r\n            \"coresentences\": {\r\n                \"id\": \"coresentences\",\r\n                \"value\": [\r\n                    [\r\n                        0,\r\n                        13\r\n                    ],\r\n                    [\r\n                        20,\r\n                        25\r\n                    ]\r\n                ],\r\n                \"label\": \"Main ideas\"\r\n            },\r\n        }`",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/StudentOverviewCard.react.js": {
    "description": "ExampleComponent is an example component.\r\nIt takes a property, `label`, and\r\ndisplays it.\r\nIt renders an input with the property `value`\r\nwhich is editable by the user.",
    "displayName": "StudentOverviewCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Classes for the outer most card."
      },
      "border": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Border of the card."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A name that will be printed when this component is rendered."
      },
      "data": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The data displayed on the card."
      },
      "shown": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The shown items displayed on the card."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  }
}